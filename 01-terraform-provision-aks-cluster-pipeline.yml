trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: OA_ENVIRONMENT
  value: qa

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          backendType: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'pb1985terraformstorage'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
- stage: DeployAksClusters
  jobs:
    - deployment: DeployDevAksCluster
      displayName: Deploy DEV AKS Cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)
      strategy:
       runOnce:
         deploy:
           steps:
           - task: DownloadSecureFile@1
             displayName: Download SSH key
             name: sshkey
             inputs:
               secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
           - task: TerraformCLI@0
             displayName: Terraform Init
             inputs:
               command: 'init'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               backendType: 'azurerm'
               backendServiceArm: 'terraform-aks-azurerm-svc-con'
               backendAzureRmResourceGroupName: 'terraform-storage-rg'
               backendAzureRmStorageAccountName: 'pb1985terraformstorage'
               backendAzureRmContainerName: 'tfstatefiles'
               backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
               allowTelemetryCollection: false
           - task: TerraformCLI@0
             inputs:
               command: 'plan'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terraform-aks-azurerm-svc-con'
               commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
               allowTelemetryCollection: false
           - task: TerraformCLI@0
             displayName: Terraform Apply
             inputs:
               command: 'apply'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terraform-aks-azurerm-svc-con'
               commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
               allowTelemetryCollection: false