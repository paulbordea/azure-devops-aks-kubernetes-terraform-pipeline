pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev

stages:
- stage: TerraformFetchRepo
  jobs:
    - job: TerraformFetchRepo
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
- stage: DeployAksClusters
  jobs:
    - deployment: DestroyDevAksCluster
      displayName: Destroy DEV AKS Cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)
      strategy:
       runOnce:
         deploy:
           steps:
           - task: DownloadSecureFile@1
             displayName: Download SSH key
             name: sshkey
             inputs:
               secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
           - task: TerraformCLI@0
             displayName: Terraform Init
             inputs:
               command: 'init'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               backendType: 'azurerm'
               backendServiceArm: 'terraform-aks-azurerm-svc-con'
               backendAzureRmResourceGroupName: 'terraform-storage-rg'
               backendAzureRmStorageAccountName: 'pb1985terraformstorage'
               backendAzureRmContainerName: 'tfstatefiles'
               backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
               allowTelemetryCollection: false
           - task: TerraformCLI@0
             inputs:
               command: 'destroy'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terraform-aks-azurerm-svc-con'
               allowTelemetryCollection: false